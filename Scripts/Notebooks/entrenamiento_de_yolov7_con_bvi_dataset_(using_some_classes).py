# -*- coding: utf-8 -*-
"""Entrenamiento de YOLOv7 con BVI-Dataset (using some classes)

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1LmJOk2FhMeG_YuvG_sVNzq0DgeABdNxl

# Entrenamiento de YOLOv7 con BVI-Dataset (using some classes)

Montar mi google drive
"""

from google.colab import drive
drive.mount("/content/drive/")

gpu_info = !nvidia-smi
gpu_info = '\n'.join(gpu_info)
if gpu_info.find('failed') >= 0:
  print('Not connected to a GPU')
else:
  print(gpu_info)

# Commented out IPython magic to ensure Python compatibility.
# Download YOLOv7 repository and install requirements
# %cd "/content/drive/MyDrive/"
!git clone https://github.com/WongKinYiu/yolov7
# %cd yolov7
!pip install -r requirements.txt

"""Descargar archivos para el entrenamiento"""

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/MyDrive/yolov7"
!wget "https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7_training.pt"
!wget "https://github.com/WongKinYiu/yolov7/releases/download/v0.1/yolov7-tiny.pt"

"""*Descargar* dataset con redución de classes"""

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/MyDrive/yolov7"
!pip install roboflow

from roboflow import Roboflow
rf = Roboflow(api_key="wuxlJNQyT3Rpk4pbEEag")
project = rf.workspace("generic-signage").project("airports-ans-subways")
dataset = project.version(4).download("yolov7")

"""## Entrenamiento de YOLOv7 small desde 0 usando datataset con classes reducidas"""

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/MyDrive/yolov7"
!python train.py --batch 16 --epochs 100 --device 0 --data "/content/drive/MyDrive/yolov7/airports-ans-subways-4/data.yaml" --weights '/content/drive/MyDrive/yolov7/runs/train/exp5/weights/best.pt' --multi-scale

"""**texto en negrita**## Evaluarción del modelo con las imágenes de la carpeta test"""

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/MyDrive/yolov7/"
!python detect.py --weights "/content/drive/MyDrive/yolov7/runs/train/exp7/weights/best.pt" --conf 0.6 --source "/content/drive/MyDrive/yolov7/airports-ans-subways-4/test/images"

import glob
from IPython.display import Image, display

i = 0
limit = 10000 # max images to print
for imageName in glob.glob('/content/drive/MyDrive/yolov7/runs/detect/exp/*.jpg'): #assuming JPG
    if i < limit:
      display(Image(filename=imageName))
      print("\n")
    i = i + 1

"""## Entrenamiento de YOLOv7 tiny"""

# Commented out IPython magic to ensure Python compatibility.
# %cd "/content/drive/MyDrive/yolov7"
!python train.py --batch 16 --epochs 300 --device 0 --data "/content/drive/MyDrive/yolov7/airports-ans-subways-4/data.yaml" --weights '/content/drive/MyDrive/yolov7/runs/train/exp11/weights/best.pt' --multi-scale

"""## Ejemplo de aprendizaje activo
Una vez completada nuestra primera ejecución de entrenamiento, deberíamos utilizar nuestro modelo para ayudar a identificar qué imágenes son más problemáticas con el fin de investigar, anotar y mejorar nuestro conjunto de datos (y, por tanto, el modelo).

Para ello, podemos ejecutar un código que devuelva automáticamente las imágenes a nuestro conjunto de datos alojado si la imagen es de una clase específica o está por debajo de un umbral de confianza determinado.
"""

# configurar el acceso a su espacio de trabajo
from roboflow import Roboflow
rf = Roboflow(api_key="QDmivV3kjFVTQ8UtRfI7")
project = rf.workspace("bvi").project("airport_signage")
dataset = project.version(6).download("yolov7")

upload_project = rf.workspace().project("airport_signage")

print("inference reference point: ", inference_project)
print("upload destination: ", upload_project)

"""Ejemplo de carga: si la predicción está por debajo de un determinado umbral de confianza, cárguela """

confidence_interval = [10,70]                                   # [porcentaje_de_límite_inferior, porcentaje_de_límite_superior]

for prediction in predictions:                                  # lista de predicciones para recorrer en bucle
  if(prediction['confidence'] * 100 >= confidence_interval[0] and 
          prediction['confidence'] * 100 <= confidence_interval[1]):
        
          # upload on success!
          print(' >> image uploaded!')
          upload_project.upload(image, num_retry_uploads=3)     # subir la imagen en cuestión